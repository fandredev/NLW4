{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zapsign/Github-Projects/moveit/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(31),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      levelUp: levelUp,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"o9E8zhqBI5V9OwAhzxrmxJ6u+/s=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/zapsign/Github-Projects/moveit/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","resetChallenge","startNewChallenge","randomChallengeIndex","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC9CJ,QAAQ,CAAC,CAAD,CADsC;AAAA,MACjEK,KADiE;AAAA,MAC1DC,QAD0D;;AAAA,mBAEtBN,QAAQ,CAAS,EAAT,CAFc;AAAA,MAEjEO,iBAFiE;AAAA,MAE9CC,oBAF8C;;AAAA,mBAGlBR,QAAQ,CAAS,CAAT,CAHU;AAAA,MAGjES,mBAHiE;AAAA,MAG5CC,sBAH4C;;AAAA,mBAI1BV,QAAQ,CAAC,IAAD,CAJkB;AAAA,MAIjEW,eAJiE;AAAA,MAIhDC,kBAJgD;;AAMxE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,cAAT,GAA0B;AACxBL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASM,iBAAT,GAA6B;AAC3B,QAAMC,oBAAoB,GAAGL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACO,MAAL,KAAgBpB,UAAU,CAACqB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGtB,UAAU,CAACkB,oBAAD,CAA5B;AACAP,IAAAA,kBAAkB,CAACW,SAAD,CAAlB;AACD;;AACD,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,KAAK,EAALA,KADK;AAELW,MAAAA,OAAO,EAAPA,OAFK;AAGLT,MAAAA,iBAAiB,EAAjBA,iBAHK;AAILE,MAAAA,mBAAmB,EAAnBA,mBAJK;AAKLS,MAAAA,iBAAiB,EAAjBA,iBALK;AAMLP,MAAAA,eAAe,EAAfA,eANK;AAOLM,MAAAA,cAAc,EAAdA,cAPK;AAQLJ,MAAAA,qBAAqB,EAArBA;AARK,KADT;AAAA,cAYGT;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GArCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\n\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  experienceToNextLevel: number;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  activeChallenge: Challenge;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrentExperience] = useState<number>(31);\n  const [challengesCompleted, setChallengesCompleted] = useState<number>(0);\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        levelUp,\n        currentExperience,\n        challengesCompleted,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        experienceToNextLevel,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}